Revert 4a032827daa89350365166b19d14d82fe8219128 Mon Sep 17 00:00:00 2001
From: Saravana Kannan <saravanak@google.com>
Date: Mon, 6 Feb 2023 17:42:01 -0800
Subject: [PATCH] of: property: Simplify of_link_to_phandle()
Link: https://lore.kernel.org/r/20230207014207.1678715-10-saravanak@google.com
--- a/drivers/of/property.c
+++ b/drivers/of/property.c
@@ -1062,6 +1062,20 @@ of_fwnode_device_get_match_data(const st
 	return of_device_get_match_data(dev);
 }
 
+static bool of_is_ancestor_of(struct device_node *test_ancestor,
+			      struct device_node *child)
+{
+	of_node_get(child);
+	while (child) {
+		if (child == test_ancestor) {
+			of_node_put(child);
+			return true;
+		}
+		child = of_get_next_parent(child);
+	}
+	return false;
+}
+
 static struct device_node *of_get_compat_node(struct device_node *np)
 {
 	of_node_get(np);
@@ -1092,27 +1106,71 @@ static struct device_node *of_get_compat
 	return node;
 }
 
-static void of_link_to_phandle(struct device_node *con_np,
+/**
+ * of_link_to_phandle - Add fwnode link to supplier from supplier phandle
+ * @con_np: consumer device tree node
+ * @sup_np: supplier device tree node
+ *
+ * Given a phandle to a supplier device tree node (@sup_np), this function
+ * finds the device that owns the supplier device tree node and creates a
+ * device link from @dev consumer device to the supplier device. This function
+ * doesn't create device links for invalid scenarios such as trying to create a
+ * link with a parent device as the consumer of its child device. In such
+ * cases, it returns an error.
+ *
+ * Returns:
+ * - 0 if fwnode link successfully created to supplier
+ * - -EINVAL if the supplier link is invalid and should not be created
+ * - -ENODEV if struct device will never be create for supplier
+ */
+static int of_link_to_phandle(struct device_node *con_np,
 			      struct device_node *sup_np)
 {
-	struct device_node *tmp_np = of_node_get(sup_np);
+	struct device *sup_dev;
+	struct device_node *tmp_np = sup_np;
 
-	/* Check that sup_np and its ancestors are available. */
-	while (tmp_np) {
-		if (of_fwnode_handle(tmp_np)->dev) {
-			of_node_put(tmp_np);
-			break;
-		}
+	/*
+	 * Find the device node that contains the supplier phandle.  It may be
+	 * @sup_np or it may be an ancestor of @sup_np.
+	 */
+	sup_np = of_get_compat_node(sup_np);
+	if (!sup_np) {
+		pr_debug("Not linking %pOFP to %pOFP - No device\n",
+			 con_np, tmp_np);
+		return -ENODEV;
+	}
 
-		if (!of_device_is_available(tmp_np)) {
-			of_node_put(tmp_np);
-			return;
-		}
+	/*
+	 * Don't allow linking a device node as a consumer of one of its
+	 * descendant nodes. By definition, a child node can't be a functional
+	 * dependency for the parent node.
+	 */
+	if (of_is_ancestor_of(con_np, sup_np)) {
+		pr_debug("Not linking %pOFP to %pOFP - is descendant\n",
+			 con_np, sup_np);
+		of_node_put(sup_np);
+		return -EINVAL;
+	}
 
-		tmp_np = of_get_next_parent(tmp_np);
+	/*
+	 * Don't create links to "early devices" that won't have struct devices
+	 * created for them.
+	 */
+	sup_dev = get_dev_from_fwnode(&sup_np->fwnode);
+	if (!sup_dev &&
+	    (of_node_check_flag(sup_np, OF_POPULATED) ||
+	     sup_np->fwnode.flags & FWNODE_FLAG_NOT_DEVICE)) {
+		pr_debug("Not linking %pOFP to %pOFP - No struct device\n",
+			 con_np, sup_np);
+		of_node_put(sup_np);
+		return -ENODEV;
 	}
+	put_device(sup_dev);
 
 	fwnode_link_add(of_fwnode_handle(con_np), of_fwnode_handle(sup_np));
+	of_node_put(sup_np);
+
+	return 0;
 }
 
 /**
